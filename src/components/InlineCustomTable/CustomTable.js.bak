import React from 'react';
import EditableCell from './EditableCell';
import EditableFormRow from './EditableRow';
import EditableContext from './Context';
import { Table, Popconfirm } from 'antd';
import Button from './Button';
import './index.css';

const uuidv4 = require('uuid/v4');

class EditableTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: props.dataSource,
      count: props.count,
      editingKey: '',
      editable: false,
      new: true,
      newEntry: false,
      currentPagination: 1
    };
    this.columns = props.columns.concat(
      
      {
        title: <Button click={this.handleAdd} />,
        width: '15%',
        render: (text, record) => {
          this.state.editable = this.isEditing(record);
          return (
            <div>
              {this.state.editable ? (
                <span style={{ fontWeight: 'bold' }}>
                  <EditableContext.Consumer>
                    {form => (
                      <a
                        onClick={() => {
                          this.save(form, record.key);
                        }}
                        style={{ marginRight: 8 }}
                      >
                        {this.state.newEntry ? (
                          <span style={{ color: '#52c41a' }}>submit</span>
                        ) : (
                          'save'
                        )}
                      </a>
                    )}
                  </EditableContext.Consumer>
                  <Popconfirm
                    title="Sure to cancel?"
                    onConfirm={() => this.cancel(record.key)}
                  >
                    <a>cancel</a>
                  </Popconfirm>
                </span>
              ) : (
                <p
                  style={{
                    textAlign: 'center',
                    margin: 0,
                    fontWeight: 'bold'
                  }}
                >
                  <a
                    onClick={() => {
                      this.edit(record.key);
                    }}
                  >
                    edit
                  </a>
                  <span style={{ letterSpacing: '3px' }}> </span>

                  <Popconfirm
                    title="Are you sure delete?"
                    onConfirm={() => this.delete(record.key)}
                    okType="danger"
                  >
                    <a style={{ color: '#ff3333' }}>delete</a>
                  </Popconfirm>
                </p>
              )}
            </div>
          );
        }
      }
    )
  }
  //add
  handleAdd = () => {
    const { data } = this.state;
    var count = data.length.toString();
    var uuid = uuidv4();
    const newData = {
      key: uuid,
      title: '',
      description: '',
      count: count
    };
    this.edit(uuid);

    data.unshift(newData);

    this.setState({
      neworedit: true,
      editable: true,
      data: [...data],
      editingKey: uuid,
      new: false,
      newEntry: true
    });
  };
  componentDidUpdate(prevProps) {
    // Typical usage (don't forget to compare props):
    if (this.props.dataSource !== prevProps.dataSource) {
      this.setState({
        loading: false,
        data: this.props.dataSource,
        count: this.props.count
      });
    }
  }

  //Delete
  delete = key => {
    const newData = [...this.state.data];
    const index = newData.findIndex(item => key === item.key);
    newData.splice(index, 1);
    this.setState({ data: newData });
  };

  cancel = Id => {
    const data = [...this.state.data];
    this.setState({
      data: data.filter(
        item => item.Id !== Id && item.code !== '' && item.description !== ''
      ),
      editingKey: '',
      neworedit: false,
      new: true
    });
  };

  isEditing = record => record.key === this.state.editingKey;

  save(form, key) {
    const { data } = this.state;
    form.validateFields((error, row) => {
      if (error) {
        return error;
      }
      const newData = [...this.state.data];
      const index = newData.findIndex(item => key === item.key);
      if (index > -1) {
        const item = newData[index];
        newData.splice(index, 1, {
          ...item,
          ...row
        });
        this.setState({ data: newData, editingKey: '' });
      } else {
        newData.push(row);
        this.setState({ data: newData, editingKey: '' });
      }
    });
  }

  edit(key) {
    this.setState({ editingKey: key, new: false, newEntry: false });
  }

  render() {
    const { data, neworedit, currentPagination } = this.state;

    const components = {
      body: {
        row: EditableFormRow,
        cell: EditableCell
      }
    };

    const columns = this.columns.map(col => {
      if (col.key === 'title' && neworedit === false) {
        col.editable = false;
      } else if (col.key === 'title' && neworedit === true) {
        col.editable = true;
      }
      if (!col.editable) {
        return col;
      }
      return {
        ...col,
        onCell: record => ({
          record,
          dataIndex: col.dataIndex,
          title: col.title,
          editing: this.isEditing(record)
        })
      };
    });

    const onChange = page => {
      this.setState({
        currentPagination: page
      });
    };

    return (
      <div>
        <Table
          key={this.state.data.key}
          pagination={{
            onChange: onChange,
            defaultPageSize: 5,
            showSizeChanger: true,
            pageSizeOptions: ['5', '10', '20', '30'],
            position: 'bottom'
          }}
          loading={this.state.loading}
          components={components}
          bordered
          dataSource={this.state.data}
          columns={columns}
          rowClassName="editable-row"
        />
      </div>
    );
  }
}

export default EditableTable;
