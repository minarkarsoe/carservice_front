import React from 'react'

import {
    Form,
    Breadcrumb,
    Button, Icon,
    Upload, message, Divider,
    Input, Select, DatePicker
} from 'antd';

import { connect } from "react-redux";

import api from 'apis';
import { noti } from 'utils/index';
import 'antd/dist/antd.css';

import { fetchEmployee, postEmployee } from '../../actions/Employee';
import { fetchPosition } from '../../actions/Position';
import { fetchDepartment } from '../../actions/Department';
import {pa} from '../../assets/img/parentinformation.svg';
import {up} from '../../assets/img/uploadphoto.svg';
import { Link } from 'react-router-dom'
import other from '../../assets/img/other.png'
import psn from '../../assets/img/personal.svg'
import job from '../../assets/img/job.svg'
import contact from '../../assets/img/contact.svg'
import parent1 from '../../assets/img/parentinformation.svg'

// import './index.css';

const image = {
    width: '200px',
    height: '200px',
    backgroundColor: '#fff',
    padding: '20px',
    marginLeft: '30%',
}

// function beforeUpload(file) {
//     const isJPG = file.type === 'image/jpeg';
//     if (!isJPG) {
//       message.error('You can only upload JPG file!');
//     }
//     const isLt2M = file.size / 1024 / 1024 < 2;
//     if (!isLt2M) {
//       message.error('Image must smaller than 2MB!');
//     }
//     return isJPG && isLt2M;
//   }



const { Option } = Select;
class CreateEmployee extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
        file: null,
        id: this.props.match.params.id,
        data: [],
        preview: null,
        loading: false
        };
        
    }

    componentDidMount() {
        this.getAllEmployee();
    }

    getAllEmployee() {
        this.props.fetchPosition();
        this.props.fetchDepartment();
    }

    onChange = (e) =>{
        let preview = URL.createObjectURL(e.target.files[0]);
        this.getBase64(e.target.files[0], (result) => {
            this.setState({preview: preview, file : result})
        });
    }

    onClose = () => {
        this.setState({preview: null})
    }
      
    onCrop = (preview) => {
        this.setState({preview})
    }

    getBase64(file, cb) {
        let reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = function () {
            cb(reader.result)
        };
        reader.onerror = function (error) {
            console.log('Error: ', error);
        };
    }

    // handleChange = value => {
    //   this.setState({
    //     dataSource:
    //       !value || value.indexOf('@') >= 0
    //         ? []
    //         : [`${value}@gmail.com`, `${value}@163.com`, `${value}@qq.com`],
    //   });
    // };

    state = {
        size: 'large',
    };

    handleSizeChange = e => {
        this.setState({ size: e.target.value });
    };




    handleSubmit = e => {
        e.preventDefault();
        this.props.form.validateFieldsAndScroll((err, fieldsValue) => {
          if (!err) {
            const values = {
                ...fieldsValue,
                'dob': fieldsValue['dob'].format('YYYY-MM-DD'),
                'start_date': fieldsValue['start_date'].format('YYYY-MM-DD')
            }
            values.image = this.state.file
            api.post('employees', values).then((result) => console.log(result))
            noti('success', 'Successfully!', 'Emp has been created successfully.')
               
          }else{
            noti('error', 'Unsuccessfully!', 'Fail to Create.')
          }
           
        });
    };
    

  

    render() {
        // const uploadButton = (
        //   <div>
        //     <Icon type={this.state.loading ? 'loading' : 'plus'} />
        //     <div className="ant-upload-text">Upload</div>
        //   </div>
        // );
        // const imageUrl = this.state.imageUrl;
        const uploadButton = (
            <div>
              <Icon type={this.state.loading ? 'loading' : 'plus'} />
              <div className="ant-upload-text">Upload</div>
            </div>
          );
          const { imageUrl } = this.state;
        const size = this.state.size;

        const { getFieldDecorator } = this.props.form;

        const renderPosition = (
            <Select style={{
                width: '200px',
                marginleft: '10px',
                display: 'inline-block'
            }} placeholder="Please select position">
                {this.props.position.map(item => {
                    return <Option value={item.id}>{item.name}</Option>
                })}
            </Select>
        )
        const renderDepartment = (
            <Select style={{
                width: '300px',
                marginleft: '10px',
                display: 'inline-block'
            }} placeholder="Please select department">
                {this.props.department.map(item => {
                    return <Option value={item.id}>{item.name}</Option>
                })}
            </Select>
        )
        const prefixSelector = getFieldDecorator('phone', {
            initialValue: '+95',
        })(
            <Select style={{ width: 70 }}>
                <Option value="01">+95</Option>
                <Option value="02">+065</Option>
            </Select>,
        );
        const selectBefore = (
            <Select defaultValue="Http://" style={{ width: 90 }}>
              <Option value="Http://">Http://</Option>
              <Option value="Https://">Https://</Option>
            </Select>
          );
          const selectAfter = (
            <Select defaultValue=".com" style={{ width: 80 }}>
              <Option value=".com">.com</Option>
              <Option value=".jp">.jp</Option>
              <Option value=".cn">.cn</Option>
              <Option value=".org">.org</Option>
            </Select>
          );

        return (
            <div>
                <Breadcrumb>
                    <Breadcrumb.Item>Configuration</Breadcrumb.Item>
                    <Breadcrumb.Item>
                        <a href="">Employee </a>
                    </Breadcrumb.Item>
                    <Breadcrumb.Item style={{color:'#4672bb'}}>Create Employee</Breadcrumb.Item>
                </Breadcrumb>
                                <h3>Create Employee</h3>
                                
                <p> You can add Employee basic data by entering one by one using the following form.</p>
                <img src={up} />
                <Form onSubmit={this.handleSubmit} >
                    <Form.Item label="Profile Image">
                        {getFieldDecorator("image", {
                            rules: [
                                {
                                    required: true,
                                    message: "Please upload your image"
                                }
                            ]
                        })(<input type="file" name="image" onChange={this.onChange} />)}
                    </Form.Item>
                    <img src={this.state.preview} style={image} />
                    {/* <img src={pa} alt='pa' /> */}
                   

                    <br />
                    <br></br>
                    <br></br>

                    <div style={{height:'230px'}}> 
                    <img src={psn} style={{ width: '20px', height: '20px' }} />&nbsp;&nbsp;&nbsp;&nbsp;<b>Personal Information</b>

                    <div 
                        style={{
                            display: 'flex',
                            
                            margin: '0 auto',
                            flexwrap: 'wrap'
                        }}
                    >
                        <Form.Item 
                            style={{
                          
                                margin: '0 300px 8px 0',
                                display: 'inline-block'
                            }} 
                            label="Code"
                        >
                            {getFieldDecorator('code', {
                                rules: [{
                                    required: true,
                                    message: 'Please input your code!'
                                }]
                            })(<Input style={{
                                marginleft: '10px',
                                display: 'inline-block',
                                defaultValue:'EMP-'
                            }} placeholder="Enter Code" />)}
                        </Form.Item>
                        <Form.Item 
                            style={{
                                margin: '0 300px 8px 0', 
                                display: 'inline-block'
                            }} 
                            label="Name:"
                        >
                            {getFieldDecorator('name', {
                                rules: [{
                                    required: true,
                                    message: 'Please input your name!'
                                }]
                            })(<Input style={{
                                marginleft: '10px',
                                display: 'inline-block'
                            }} placeholder="Enter Name" />)}
                        </Form.Item>                            
                    </div>
                        <div style={{
                                    display: 'flex',
                                    
                                    margin: '0 auto',
                                    flexwrap: 'wrap'

                                    }}>
                            <Form.Item style={{
                            width: '300px',
                            margin: '0 300px 8px 0',
                            display: 'inline-block'
                        }} 
                        label="NRIC:">
                            {getFieldDecorator('nric', {
                                rules: [{
                                    required: true,
                                    message: 'Please input your NRIC!'
                                }]
                            })(<Input style={{
                                marginleft: '10px',
                                display: 'inline-block'
                            }} placeholder="Enter NRIC" />)}
                        </Form.Item>
                            

                            <Form.Item style={{
                                width: '300px',
                                margin: '0 335px 8px 0',
                                display: 'inline-block'
                            }} label="Date Of Birth">
                                {
                                    getFieldDecorator('dob', {
                                        rules: [{
                                            required: true,
                                            message: 'Please input your date of birth!'
                                        }]
                                    })(<DatePicker style={{
                                        width: '200px',
                                        marginleft: '10px',
                                        display: 'inline-block'
                                    }} placeholder="dd/mm/yyyy" />)}
                            </Form.Item>
                        </div>
                    </div>
                    <br></br>
                    <div style={{height:'230px'}}>
                    <img src={job} style={{ width: '20px', height: '20px' }} />&nbsp;&nbsp;&nbsp;&nbsp;<b>Job Information</b>
                    
                    <div 
                        style={{
                            display: 'flex',
                           
                            margin: '0 auto',
                        }
                    }>
                        <Form.Item 
                            style={{
                                width: '200px',
                                margin: '0 300px 8px 0',
                                display: 'block'
                            }} 
                            label="Position:"
                        >
                            {getFieldDecorator('position_id', {
                                rules: [{ required: true, message: 'Please select position' }],
                            })
                                (renderPosition)    
                            }
                        </Form.Item>
                        <Form.Item style={{
                            width: '500px',
                            margin: '0 480px 8px 0', 
                        }} label="Department:">

                            {getFieldDecorator('department_id', {
                                rules: [{ required: true, message: 'Please select department' }],
                            })
                                (renderDepartment)
                            }
                        </Form.Item>
  
                        </div>
                        <div style={{
                                    display: 'flex',
                                    
                                    margin: '0 auto',
                                    flexwrap: 'wrap'

                                    }}>
                        <Form.Item style={{
                                width: '300px',
                                margin: '0 300px 8px 0',
                                display: 'inline-block'
                            }} label="Start Date:">
                                {getFieldDecorator('start_date', {
                                    rules: [{
                                        required: true,
                                        message: 'Please input your start date!'
                                    }]
                                })(
                                    <DatePicker
                                        dateRender={current => {
                                            const style = {};
                                            if (current.date() === 1) {
                                                style.border = '1px solid #1890ff';
                                                style.borderRadius = '50%';
                                            }
                                            return (
                                                <div className="ant-calendar-date" style={style}>
                                                    {current.date()}
                                                </div>
                                            );
                                        }}
                                    />
                                )}
                            </Form.Item>
                        </div>
                    </div>
                    <div style={{height:'230px'}}>
                    <img src={contact} style={{ width: '20px', height: '20px' }} />&nbsp;&nbsp;&nbsp;&nbsp;<b>Contact Information</b>
                    
                    <div style={{
                                display: 'flex',
        
                                margin: '0 auto',

                                }}>
                            <Form.Item style={{
                                width: '240px',
                            
                                
                            
                            }} label="Email:">
                                {getFieldDecorator('email', {
                                    rules: [{
                                        type:'email',
                                        message: 'The input is not valid E-mail',
                                    },
                                    {
                                        required:true,
                                        message:'Please input your email'
                                    }
                                ]
                                })(<Input style={{ marginLeft: '1px', display: 'inline-block' }}
                                 placeholder="Enter your email" />)}
                            </Form.Item>


                            
                            {/* <Form.Item style={{ margin: '0 340px 8px 0', }} */}
                            <Form.Item style={{
                                width: '300px',
                            
                                marginLeft:'250px',
                                
                            }}
                             label="Phone No:">
                                {getFieldDecorator('phone', {
                                    rules: [{
                                        required: true,
                                        message: 'Please input your phone no!'
                                    }]
                                })(<Input style={{
                                    marginLeft: '10px',
                                    width:'275px'
                                }} addonBefore={prefixSelector} placeholder="0 0000 0000" />)}
                            </Form.Item>
</div>
{/* <div style={{display:'flex',justifyContent:'space-between'}}> */}
                               <div style={{
                                display: 'flex',
                                height:'230px',
                                margin: '0 auto',

                                }}>

                                <Form.Item style={{
                                width: '300px',
                                
                                display: 'inline-block'
                            }} label="Permanent Address:">
                                {getFieldDecorator('parmanent_address', {
                                    rules: [{
                                        required: true,
                                        message: 'Please input your permanent address!'
                                    }]
                                })(<Input style={{
                                    marginleft: '10px',
                                    width:'280px'
                                    
                                }} placeholder="Enter Permanent Address" />)}
                            </Form.Item>

                            <Form.Item style={{
                                width: '300px',
                                marginLeft:'200px',
                                display: 'inline-block'
                            }} label="Temporary Address">
                                {
                                    getFieldDecorator('temporary_address', {
                                        rules: [{
                                            required: true,
                                            message: 'Please input your temporary address!'
                                        }]
                                    })(<Input style={{
                                        marginleft: '10px',
                                        width:'280px'
                                    
                                    }} placeholder="Enter Temporary Address!" />)}
                            </Form.Item>
                            
                            
                            </div>
                            </div>



                    <div style={{height:'150px'}}>
                        
                        <img src={parent1} style={{ width: '20px', height: '20px',marginleft:'150px' }} />&nbsp;&nbsp;&nbsp;&nbsp;<b>Parent Information</b>


                        <div style={{
                                    display: 'flex',
                                    height:'230px',
                                    margin: '0 auto',

                                    }}>
                                    <Form.Item style={{
                                  
                                    marginLeft:'1px',
                                    display: 'inline-block'
                                    }} label="Father Name:">
                                {getFieldDecorator('father_name', {
                                    rules: [{
                                        required: true,
                                        message: 'Please input your father name!'
                                    }]
                                })(<Input style={{
                                    marginleft: '10px',
                                    display: 'inline-block'
                                }} placeholder="Enter Father Name" />)}
                            </Form.Item>
                        
                            <Form.Item style={{
                               
                                marginLeft:'300px',
                                display: 'block'
                            }} label="Mother Name:">
                                {getFieldDecorator('mother_name', {
                                    rules: [{
                                        required: true,
                                        message: 'Please input your mother name!'
                                    }]
                                })(<Input style={{
                                    marginleft: '10px',
                                    display: 'inline-block'
                                }} placeholder="Enter Mother Name" />)}
                            </Form.Item>
                        </div></div>

                    

                    <div style={{height:'190px'}}>
                    <img src={other} style={{ width: '20px', height: '20px' }} />&nbsp;&nbsp;&nbsp;<b>Other Information</b>


                        <div style={{
                            width: '300px',
                            display: 'inline-block'
                        }}>
                            
                        </div>
                        <div style={{display:'flex',justifyContent:'space-between'}}>
                            
                        
                            <Form.Item style={{ float: 'left',width:'200px',marginRight:'30px'}}
                               
                             label="Education:">
                                {getFieldDecorator('education', {
                                    rules: [{
                                        required: true,
                                        message: 'Please input your education'
                                    }]
                                })(<Input style={{
                                    marginRight: '10px',
                                    
                                }} placeholder="Enter your education " />)}
                            </Form.Item>
                            <Form.Item style={{ marginRight: '180px',float: 'right' }}
                                
                               
                             label="Social_Media_Link">
                                {getFieldDecorator('social_media_link', {
                                    rules: [{
                                        required: true,
                                        message: 'Please input your social_media_link address!'
                                    }]
                                })(<Input addonBefore={selectBefore} addonAfter={selectAfter} defaultValue="mysite"/>)}
                            </Form.Item>
                        </div>
                    </div>
                    <Button type='primary'
                        htmlType="submit"
                        size={size} style={{marginLeft:'400px',backgroundColor:'#4672bb',width:'100px',padding:'4px'}}>
                        Submit</Button>
                        <Link to="/employee"> 
                    <Button size={size} style={{marginLeft:'50px',width:'100px',padding:'4px'}}>
                        Cancel</Button></Link>
                </Form>
            </div>



        );
    }
}


const Employee = Form.create()(CreateEmployee);

function mapStateToProps(state) {
    return {
        lang: state.locale.lang,
        isSignedIn: state.auth.isSignedIn,
        roleid: state.auth.roleid,
        isloaded: state.loading.isloaded,
        position: state.position.list,
        department: state.department.list,
    };
}
// function mapStateToProps(state) {
//     return {
//         lang: state.locale.lang,
//         isSignedIn: state.auth.isSignedIn,
//         roleid: state.auth.roleid,
//         isloaded: state.loading.isloaded,
//         position: state.position.list,
//     };
// }

export default connect(
    mapStateToProps,
    { fetchEmployee, postEmployee, fetchPosition,fetchDepartment }
)(Employee);
